[user]
	name = Mateusz Łoskot
	email = mateusz@loskot.net
	signingkey = BB2AC1F2
[github]
	user = mloskot
[core]
	editor = code --wait -n
[color]
	branch = auto
	diff = auto
	status = auto
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	header = normal
	added = red
	updated = green
	changed = red
	untracked = red
	nobranch = red
[alias]
	### Basics
	br = branch
	bv = branch -vv
	brv = branch -vv
	bra = branch -a
	ci = commit --verbose
	cia = commit --verbose --amend
	ciae = commit --verbose --amend --no-edit
	co = checkout
	dc = diff --cached
	df = diff
	ign = ls-files -o -i --exclude-standard
	lsf = ls-files
	lfst = lfs status
	ra = remote add
	rt = remote
	rta = remote add
	rtr = remote remove
	rtv = remote -v
	st = status
	### History
	l = log  --color --graph --oneline
	l2 = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	la = log  --color --graph --oneline --all
	# what new commits have been created by the last command – typically after a git pull
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
	##### Pretty Git graphs (https://stackoverflow.com/a/22481650/151641)
	logx = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset)+%C(dim black)(%cr)%C(reset)+%C(auto)%d%C(reset)++\n+++       %C(bold black)%an%C(reset)%C(black): %s%C(reset)'
	tree = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n%x09%x09%x09%C(black)%s %C(reset)'
	tree2 = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n         %C(black)[%cr]%C(reset)  %x09%C(black)%an: %s %C(reset)'
	t = tree
	stree = !bash -c '"                                                                             \
		while IFS=+ read -r hash time branch message; do                                            \
			timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
			timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
			printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"\";          \
		done < <(git logx && echo);"'
	vtree = !bash -c '"                                                                             \
		while IFS=+ read -r hash time branch message; do                                            \
			timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
			timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
			printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"$message\";  \
		done < <(git logx && echo);"'
	# Dump GitHub repo history to changelog in Markdown
	# usage: git ghclm first_tag last_tag github_user github_repo
	ghclm = "!f() { git log $1...$2  --pretty=format:\"* [view](http://github.com/$3/$4/commit/%H) - %s\"; }; f"
	# show ignored files
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
	graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	### Branches maintenance
	prune-branches = "!f() { git remote prune $1 && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D; }; f"

[commit]
	template = ~/.gitmessage
[credential]
	helper = manager
[http]
	postBuffer = 1048576000
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
